// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QL_DoAnThucTap.DataContexts;

#nullable disable

namespace QL_DoAnThucTap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240519011858_update_v11")]
    partial class update_v11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.ConfirmEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("confirmEmails");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProgressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgressId");

                    b.ToTable("details");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgressId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("progresses");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TopicId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("reminders");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClassId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Account", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.ConfirmEmail", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Detail", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Progress", "Progress")
                        .WithMany("Details")
                        .HasForeignKey("ProgressId");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Feedback", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Progress", "Progress")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Progress", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Project", "Project")
                        .WithMany("Progresses")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Project", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Student", "Student")
                        .WithMany("Projects")
                        .HasForeignKey("StudentId");

                    b.HasOne("QL_DoAnThucTap.Models.EF.Teacher", "Teacher")
                        .WithMany("Projects")
                        .HasForeignKey("TeacherId");

                    b.HasOne("QL_DoAnThucTap.Models.EF.Topic", "Topic")
                        .WithMany("Projects")
                        .HasForeignKey("TopicId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.RefreshToken", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Reminder", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Project", "Project")
                        .WithMany("Reminder")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QL_DoAnThucTap.Models.EF.Teacher", null)
                        .WithMany("Reminders")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Student", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QL_DoAnThucTap.Models.EF.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Teacher", b =>
                {
                    b.HasOne("QL_DoAnThucTap.Models.EF.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Progress", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Project", b =>
                {
                    b.Navigation("Progresses");

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Student", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Teacher", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("QL_DoAnThucTap.Models.EF.Topic", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
